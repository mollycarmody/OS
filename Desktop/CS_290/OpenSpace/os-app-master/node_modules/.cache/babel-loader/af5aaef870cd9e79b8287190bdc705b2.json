{"ast":null,"code":"import * as PropTypes from 'prop-types';\nimport { IntlService } from './Intl/IntlService';\nimport { LocalizationService } from './Localization/LocalizationService'; // tslint:disable:max-line-length\n\n/**\n * Provides an internationalization service. When the passed component is a direct or indirect child of `IntlProvider`, the returned service uses the locale of the provider. Otherwise, uses `en` as a default locale. To handle locale changes, call the method on each `render`.\n *\n * @param componentClass - The React component class that will use the internationalization service.\n */\n\nexport function provideIntlService(component) {\n  if (!component && process.env.NODE_ENV !== 'production') {\n    throw \"Passed component - \" + component + \" is invalid.\";\n  }\n\n  var intlServiceFromContext = component.context && component.context.kendoIntlService;\n  return intlServiceFromContext || new IntlService('en');\n}\n/**\n * Provides a localization service. When the passed component is a direct or indirect child of `LocalizationProvider`, the returned service uses the language of the provider. To handle locale changes, call the method on each `render`.\n *\n * @param componentClass - The React component class that will use the internationalization service.\n */\n\nexport function provideLocalizationService(component) {\n  if (!component && process.env.NODE_ENV !== 'production') {\n    throw \"Passed component - \" + component + \" is invalid.\";\n  }\n\n  var localizationServiceFromContext = component.context && component.context.kendoLocalizationService;\n  return localizationServiceFromContext || new LocalizationService();\n}\n/**\n * A method which registers a component class or a functional stateless component for internationalization. When a component of that type is a direct or indirect child of `IntlProvider`, the locale of the provider is used. Otherwise, uses `en` as a default locale.\n *\n * @param component - The React component class that will use the internationalization methods.\n */\n\nexport function registerForIntl(component) {\n  var ctx = {\n    kendoIntlService: PropTypes.object\n  };\n\n  if (component.contextTypes) {\n    Object.assign(component.contextTypes, ctx);\n  } else {\n    component.contextTypes = ctx;\n  }\n}\n/**\n * A method which registers a component class or a stateless functional component for localization. When a component of that type is a direct or indirect child of `LocalizationProvider`, the language of the provider is used.\n *\n * @param component - The React component class that will use the internationalization methods.\n */\n\nexport function registerForLocalization(component) {\n  var ctx = {\n    kendoLocalizationService: PropTypes.object\n  };\n\n  if (component.contextTypes) {\n    Object.assign(component.contextTypes, ctx);\n  } else {\n    component.contextTypes = ctx;\n  }\n} // tslint:enable:max-line-length","map":null,"metadata":{},"sourceType":"module"}