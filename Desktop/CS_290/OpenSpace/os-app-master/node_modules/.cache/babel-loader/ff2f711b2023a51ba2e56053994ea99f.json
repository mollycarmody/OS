{"ast":null,"code":"import { localeInfo, localeCurrency, currencyDisplays } from '../cldr';\nimport { PERCENT, NUMBER_PLACEHOLDER, CURRENCY_PLACEHOLDER, DEFAULT_LOCALE, EMPTY, POINT } from '../common/constants';\nimport isNumber from '../common/is-number';\nimport isCurrencyStyle from './is-currency-style';\nimport formatOptions from './format-options';\nvar exponentRegExp = /[eE][\\-+]?[0-9]+/;\nvar nonBreakingSpaceRegExp = /\\u00A0/g;\n\nfunction cleanNegativePattern(number, patterns) {\n  if (patterns.length > 1) {\n    var parts = (patterns[1] || EMPTY).replace(CURRENCY_PLACEHOLDER, EMPTY).split(NUMBER_PLACEHOLDER);\n\n    if (number.indexOf(parts[0]) > -1 && number.indexOf(parts[1]) > -1) {\n      return number.replace(parts[0], EMPTY).replace(parts[1], EMPTY);\n    }\n  }\n}\n\nfunction cleanCurrencyNumber(value, info, format) {\n  var options = formatOptions(format) || {};\n  var isCurrency = isCurrencyStyle(options.style);\n  var number = value;\n  var negative;\n  var currency = options.currency || localeCurrency(info, isCurrency);\n\n  if (currency) {\n    var displays = currencyDisplays(info, currency, isCurrency);\n\n    if (displays) {\n      for (var idx = 0; idx < displays.length; idx++) {\n        var display = displays[idx];\n\n        if (number.includes(display)) {\n          number = number.replace(display, EMPTY);\n          isCurrency = true;\n          break;\n        }\n      }\n    }\n\n    if (isCurrency) {\n      var cleanNumber = cleanNegativePattern(number, info.numbers.currency.patterns) || cleanNegativePattern(number, info.numbers.accounting.patterns);\n\n      if (cleanNumber) {\n        negative = true;\n        number = cleanNumber;\n      }\n    }\n  }\n\n  return {\n    number: number,\n    negative: negative\n  };\n}\n\nexport default function parseNumber(value, locale, format) {\n  if (locale === void 0) locale = DEFAULT_LOCALE;\n  if (format === void 0) format = {};\n\n  if (!value && value !== 0) {\n    return null;\n  }\n\n  if (isNumber(value)) {\n    return value;\n  }\n\n  var info = localeInfo(locale);\n  var symbols = info.numbers.symbols;\n  var number = value.toString();\n  var isPercent;\n\n  if (exponentRegExp.test(number)) {\n    number = parseFloat(number.replace(symbols.decimal, POINT));\n    return isNaN(number) ? null : number;\n  }\n\n  var negativeSignIndex = number.indexOf(\"-\");\n\n  if (negativeSignIndex > 0) {\n    return null;\n  }\n\n  var isNegative = negativeSignIndex > -1;\n  var ref = cleanCurrencyNumber(number, info, format);\n  var negativeCurrency = ref.negative;\n  var newNumber = ref.number;\n  number = newNumber;\n  isNegative = negativeCurrency !== undefined ? negativeCurrency : isNegative;\n\n  if (format.style === PERCENT || number.indexOf(symbols.percentSign) > -1) {\n    number = number.replace(symbols.percentSign, EMPTY);\n    isPercent = true;\n  }\n\n  number = number.replace(\"-\", EMPTY).replace(nonBreakingSpaceRegExp, \" \").split(symbols.group.replace(nonBreakingSpaceRegExp, \" \")).join(EMPTY).replace(symbols.decimal, POINT);\n  number = parseFloat(number);\n\n  if (isNaN(number)) {\n    number = null;\n  } else if (isNegative) {\n    number *= -1;\n  }\n\n  if (number && isPercent) {\n    number /= 100;\n  }\n\n  return number;\n}","map":null,"metadata":{},"sourceType":"module"}