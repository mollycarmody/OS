{"ast":null,"code":"var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\n\nvar FUNC_ERROR_TEXT = 'Expected a function';\n/** Used as references for various `Number` constants. */\n\nvar NAN = 0 / 0;\n/** `Object#toString` result references. */\n\nvar symbolTag = '[object Symbol]';\n/** Used to match leading and trailing whitespace. */\n\nvar reTrim = /^\\s+|\\s+$/g;\n/** Used to detect bad signed hexadecimal string values. */\n\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n/** Used to detect binary string values. */\n\nvar reIsBinary = /^0b[01]+$/i;\n/** Used to detect octal string values. */\n\nvar reIsOctal = /^0o[0-7]+$/i;\n/** Built-in method references without a dependency on `root`. */\n\nvar freeParseInt = parseInt;\n/** Detect free variable `global` from Node.js. */\n\nvar freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n/** Detect free variable `self`. */\n\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n/** Used as a reference to the global object. */\n\nvar root = freeGlobal || freeSelf || Function('return this')();\n/** Used for built-in method references. */\n\nvar objectProto = Object.prototype;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar objectToString = objectProto.toString;\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\n\nvar now = function now() {\n  return root.Date.now();\n};\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\n\n\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n\n  wait = toNumber(wait) || 0;\n\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time; // Start the timer for the trailing edge.\n\n    timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.\n\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n\n    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;\n  }\n\n  function timerExpired() {\n    var time = now();\n\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    } // Restart the timer.\n\n\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n\n    return result;\n  }\n\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\n\n\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\n\n\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\n\n\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\n\n\nfunction isSymbol(value) {\n  return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;\n}\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\n\n\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n\n  if (isSymbol(value)) {\n    return NAN;\n  }\n\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? other + '' : other;\n  }\n\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n}\n\nvar lodash_throttle = throttle;\nvar html = document.documentElement;\nvar body = document.body;\n\nvar getScrollTop = function getScrollTop() {\n  return document.scrollingElement.scrollTop;\n};\n\nvar getViewportHeight = function getViewportHeight() {\n  return window.innerHeight;\n};\n\nvar getDocumentHeight = function getDocumentHeight() {\n  return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n};\n\nfunction calculateFixedReadingLine(scrollTop, viewportHeight) {\n  return scrollTop + viewportHeight / 3;\n}\n\nfunction calculateReadingLine(scrollTop, viewportHeight, documentHeight) {\n  var fixedReadingLine = calculateFixedReadingLine(scrollTop, viewportHeight);\n  var readingLineFromTop = scrollTop * 2 + 1;\n  var scrollBottom = documentHeight - viewportHeight - scrollTop;\n  var readingLineFromBottom = documentHeight - scrollBottom * 3 - 1;\n\n  if (readingLineFromTop < fixedReadingLine) {\n    return readingLineFromTop;\n  } else if (readingLineFromBottom > fixedReadingLine) {\n    return readingLineFromBottom;\n  }\n\n  return fixedReadingLine;\n}\n\nfunction calculateScroll(readingLine, viewportHeight, documentHeight) {\n  var scrollWhenMiddle = readingLine - viewportHeight / 3;\n  var scrollWhenTop = (readingLine - 1) / 2;\n  var scrollWhenBottom = (readingLine + 1 - documentHeight) / 3 + documentHeight - viewportHeight;\n  return Math.max(Math.min(scrollWhenMiddle, scrollWhenBottom), scrollWhenTop);\n}\n\nvar defineProperty = function defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction coordinatesFromSection(sectionEl) {\n  var rect = sectionEl.getBoundingClientRect();\n  var top = rect.top,\n      bottom = rect.bottom;\n  return {\n    top: top + window.pageYOffset,\n    bottom: bottom + window.pageYOffset\n  };\n}\n\nfunction coordinatesFromSections(sectionsEl) {\n  return Object.keys(sectionsEl).reduce(function (acc, sectionName) {\n    var sectionEl = sectionsEl[sectionName];\n    var rect = sectionEl.getBoundingClientRect();\n    var top = rect.top,\n        bottom = rect.bottom;\n    return _extends({}, acc, defineProperty({}, sectionName, {\n      top: top + window.pageYOffset,\n      bottom: bottom + window.pageYOffset\n    }));\n  }, {});\n}\n\nfunction calculateScrollPoint(sections, sectionName) {\n  var viewportHeight = getViewportHeight();\n  var documentHeight = getDocumentHeight();\n  var sectionEl = sections[sectionName];\n  var elementCoordinates = coordinatesFromSection(sectionEl);\n  var toTop = elementCoordinates.top;\n  var scrollToTop = calculateScroll(toTop, viewportHeight, documentHeight) + 1;\n  var onTopFixedReadingLine = calculateFixedReadingLine(scrollToTop, viewportHeight);\n  var scrollToBottom = calculateScroll(elementCoordinates.bottom, viewportHeight, documentHeight) - 1;\n\n  if (onTopFixedReadingLine < elementCoordinates.top) {\n    return scrollToBottom;\n  }\n\n  return scrollToTop;\n}\n\nfunction recalculateSections(coordinates, readingLine, fixedReadingLine, sections) {\n  return Object.keys(coordinates).map(function (sectionName, i, arr) {\n    var section = coordinates[sectionName];\n    var active = void 0;\n    var isOnReadingLine = section.top <= readingLine && section.bottom > readingLine;\n    var isTheFirstSection = i === 0;\n    var isTheLastSection = i === arr.length - 1;\n    var isReadingLineAbove = readingLine < section.top;\n    var isReadingLineBelow = readingLine > section.top;\n    var isOnFixedReadingLine = section.top <= fixedReadingLine && section.bottom > fixedReadingLine;\n    var isInOrAboveFixedReadingLine = isOnFixedReadingLine || section.top < fixedReadingLine;\n    var isInOrBelowFixedReadingLine = isOnFixedReadingLine || section.top > fixedReadingLine;\n\n    if (isOnReadingLine) {\n      active = true;\n    } else if (isTheFirstSection && isReadingLineAbove && isInOrAboveFixedReadingLine) {\n      active = true;\n    } else if (isTheLastSection && isReadingLineBelow && isInOrBelowFixedReadingLine) {\n      active = true;\n    } else {\n      active = false;\n    }\n\n    var yScrollPoint = calculateScrollPoint(sections, sectionName);\n    return {\n      name: sectionName,\n      scroll: function scroll(e) {\n        if (e && typeof e.preventDefault === 'function') e.preventDefault();\n        window.scrollTo(0, yScrollPoint);\n      },\n      active: active,\n      yScrollPoint: yScrollPoint\n    };\n  });\n}\n\nfunction recalculate(sections) {\n  var scrollTop = getScrollTop();\n  var viewportHeight = getViewportHeight();\n  var documentHeight = getDocumentHeight();\n  var coordinates = coordinatesFromSections(sections);\n  var readingLine = calculateReadingLine(scrollTop, viewportHeight, documentHeight);\n  var fixedReadingLine = calculateFixedReadingLine(scrollTop, viewportHeight);\n  return recalculateSections(coordinates, readingLine, fixedReadingLine, sections);\n}\n\nvar eventThrottler = function eventThrottler(eventHandler, ms) {\n  return lodash_throttle(eventHandler, ms);\n};\n\nvar sections = {};\nvar sectionCallbacks = new Map();\nvar scrollCallbacks = new Set();\nvar spy = {\n  scrollHandler: function scrollHandler() {\n    var recalculatedSections = recalculate(sections);\n    Object.keys(sections).forEach(function (sectionName) {\n      if (sectionCallbacks.get(sectionName) && sectionCallbacks.get(sectionName).size) {\n        sectionCallbacks.get(sectionName).forEach(function (callback) {\n          if (typeof callback === 'function') {\n            var sectionState = recalculatedSections.find(function (result) {\n              return result.name === sectionName;\n            });\n            callback(sectionState);\n          }\n        });\n      }\n    });\n    scrollCallbacks.forEach(function (callback) {\n      if (typeof callback === 'function') {\n        callback(recalculatedSections);\n      }\n    });\n  },\n  registerSectionSpy: function registerSectionSpy(sectionName, callback) {\n    if (!sectionCallbacks.has(sectionName)) {\n      sectionCallbacks.set(sectionName, new Set());\n    }\n\n    sectionCallbacks.get(sectionName).add(callback);\n    spy.scrollHandler();\n    return function () {\n      return spy.unregisterSectionSpy(sectionName, callback);\n    };\n  },\n  unregisterSectionSpy: function unregisterSectionSpy(sectionName, callback) {\n    if (sectionCallbacks.has(sectionName)) {\n      sectionCallbacks.get(sectionName).delete(callback);\n    }\n  },\n  registerScrollSpy: function registerScrollSpy(callback) {\n    scrollCallbacks.add(callback);\n    spy.scrollHandler();\n    return function () {\n      return spy.unregisterScrollSpy(callback);\n    };\n  },\n  unregisterScrollSpy: function unregisterScrollSpy(callback) {\n    scrollCallbacks.delete(callback);\n  },\n  registerSection: function registerSection(name, domElement) {\n    sections[name] = domElement;\n    spy.scrollHandler();\n    return function () {\n      return spy.unregisterSection(name);\n    };\n  },\n  unregisterSection: function unregisterSection(name) {\n    delete sections[name];\n    spy.scrollHandler();\n  }\n};\nwindow.addEventListener('scroll', eventThrottler(spy.scrollHandler, 66));\nwindow.addEventListener('resize', eventThrottler(spy.scrollHandler, 66));\nexport { spy };","map":null,"metadata":{},"sourceType":"module"}