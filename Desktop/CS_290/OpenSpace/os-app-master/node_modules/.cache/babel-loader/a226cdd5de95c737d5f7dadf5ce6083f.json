{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mollycarmody/Desktop/CS_290/OpenSpace/os-app-master/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mollycarmody/Desktop/CS_290/OpenSpace/os-app-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\n/**\n * Create api endpoint\n *\n * ```javascript\n * // Create users collections endpoint\n * const users = createCollectionEnpoint(requestor, 'users')\n *\n * // Fetch all users\n * users()\n * users.all()\n * ```\n *\n * @param Requestor requestor\n * @param String endpoint\n * @param Boolean isCollection\n */\n\nfunction createApiEndpoint(requestor, endpoint) {\n  var isCollection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  var _get = function _get() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    return requestor.makeRequest('get', '/' + endpoint, params);\n  };\n\n  var _post = function _post(data) {\n    return requestor.makeRequest('post', '/' + endpoint, data);\n  };\n  /**\n   *\n   * @param {*} params\n   */\n\n\n  var apiEndpoint = function apiEndpoint() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null; // calling endpoint() is equivalent to endpoint.all()\n\n    return _get(params);\n  };\n\n  if (isCollection) {\n    apiEndpoint.all = _get;\n    apiEndpoint.create = _post;\n\n    apiEndpoint.find = function (id) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return requestor.makeRequest('get', '/' + endpoint + '/' + id, params);\n    };\n\n    apiEndpoint.update = function (id, data) {\n      return requestor.makeRequest('put', '/' + endpoint + '/' + id, data);\n    };\n\n    apiEndpoint.delete = apiEndpoint.remove = function (id) {\n      return requestor.makeRequest('delete', '/' + endpoint + '/' + id);\n    };\n\n    apiEndpoint.one = function (key) {\n      return requestor.endpoint(endpoint + '/' + key, endpoint + '_' + key, false);\n    };\n  } else {\n    apiEndpoint.get = _get;\n    apiEndpoint.post = _post;\n\n    apiEndpoint.put = function (data) {\n      return requestor.makeRequest('put', '/' + endpoint, data);\n    };\n\n    apiEndpoint.delete = function () {\n      return requestor.makeRequest('delete', '/' + endpoint);\n    };\n  } // Wrap the endpoint with a proxy to handle undefined property as another api endpoint\n  // undefined property on collection endpoint return entity endpoint\n  // and collection endpoint on entity endpoint\n\n\n  var apiEndpointProxy = new Proxy(apiEndpoint, {\n    get: function get(apiEndpoint, prop) {\n      if (prop in apiEndpoint) {\n        return apiEndpoint[prop];\n      }\n\n      return requestor.endpoint(endpoint + '/' + prop, endpoint + '_' + prop, !isCollection);\n    }\n  });\n  return apiEndpointProxy;\n}\n\nvar classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar inRange = function inRange(value, min, max) {\n  return value >= min && value <= max;\n};\n\nvar Requestor = function () {\n  function Requestor(config) {\n    classCallCheck(this, Requestor);\n    this.apiCache = {};\n    this.baseUrl = config.baseUrl;\n    this.options = {};\n    this.currentRequestOptions = {};\n    this.requestTransformers = [];\n    this.responseTransformers = [];\n    var axiosConfig = Object.assign({\n      baseURL: this.baseUrl,\n      headers: {\n        'Accept': 'application/json'\n      }\n    }, config);\n    this._axios = axios.create(axiosConfig);\n  }\n  /**\n   * Get internal axios instance\n   *\n   * @return Axios\n   */\n\n\n  createClass(Requestor, [{\n    key: 'axios',\n    value: function axios$$1() {\n      return this._axios;\n    }\n    /**\n     * Set request header for all requests\n     *\n     * @param {String} header\n     * @param {String} value\n     */\n\n  }, {\n    key: 'setHeader',\n    value: function setHeader(header, value) {\n      this._axios.defaults.headers[header] = value;\n    }\n    /**\n     * Set multiple request headers\n     *\n     * @param {Object} headers\n     */\n\n  }, {\n    key: 'setHeaders',\n    value: function setHeaders(headers) {\n      for (var header in headers) {\n        this.setHeader(header, headers[header]);\n      }\n    }\n    /**\n     * Create collection endpoint\n     *\n     * @param String endpoint\n     * @param String name\n     *\n     * @return Proxy[RestApi]\n     */\n\n  }, {\n    key: 'endpoint',\n    value: function endpoint(_endpoint, name) {\n      var isCollection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      var cacheKey = name || _endpoint.replace(/\\//g, '_');\n\n      if (this.apiCache[cacheKey]) {\n        return this.apiCache[cacheKey];\n      }\n\n      var api = createApiEndpoint(this, _endpoint, isCollection);\n      this.apiCache[cacheKey] = api;\n      return api;\n    }\n    /**\n     * Create some endpoint\n     *\n     * @param {*} endpoints\n     */\n\n  }, {\n    key: 'endpoints',\n    value: function endpoints(_endpoints) {\n      for (var name in _endpoints) {\n        this.endpoint(_endpoints[name], name);\n      }\n    }\n    /**\n     * Performs http request using axios\n     *\n     * @param String method\n     * @param String url\n     * @param Object paramsOrData\n     *\n     * @return Promise\n     */\n\n  }, {\n    key: 'makeRequest',\n    value: function () {\n      var _makeRequest = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(method, url, paramsOrData) {\n        var requestConfig, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                requestConfig = {\n                  url: url,\n                  method: method\n                };\n\n                if (method === 'get') {\n                  requestConfig['params'] = paramsOrData;\n                } else {\n                  requestConfig['data'] = paramsOrData;\n                } // Run request transformers\n\n\n                if (this.requestTransformers.length) {\n                  this.requestTransformers.forEach(function (transform) {\n                    transform(requestConfig);\n                  });\n                }\n\n                _context.prev = 3;\n                _context.next = 6;\n                return this._axios.request(requestConfig);\n\n              case 6:\n                response = _context.sent;\n                return _context.abrupt(\"return\", this.transformResponse(response));\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](3);\n\n                if (!_context.t0.response) {\n                  _context.next = 14;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.transformResponse(_context.t0.response));\n\n              case 14:\n                throw _context.t0;\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 10]]);\n      }));\n\n      function makeRequest(_x, _x2, _x3) {\n        return _makeRequest.apply(this, arguments);\n      }\n\n      return makeRequest;\n    }()\n  }, {\n    key: 'transformResponse',\n    value: function transformResponse(response) {\n      var wrappedResponse = this._wrapAxiosResponse(response); // Run request tranformers\n\n\n      if (this.responseTransformers.length) {\n        this.responseTransformers.forEach(function (transformer) {\n          return transformer(wrappedResponse);\n        });\n      }\n\n      return wrappedResponse;\n    }\n  }, {\n    key: 'addRequestTransformer',\n    value: function addRequestTransformer(transformer) {\n      this.requestTransformers.push(transformer);\n      return this;\n    }\n  }, {\n    key: 'addResponseTransformer',\n    value: function addResponseTransformer(transformer) {\n      this.responseTransformers.push(transformer);\n      return this;\n    }\n  }, {\n    key: '_wrapAxiosResponse',\n    value: function _wrapAxiosResponse(axiosResponse) {\n      var wrappedResponse = {\n        status: axiosResponse.status,\n        statusText: axiosResponse.statusText,\n        config: axiosResponse.config,\n        headers: axiosResponse.headers,\n        data: axiosResponse.data\n      };\n      wrappedResponse.isOk = wrappedResponse.status == 200;\n      wrappedResponse.isCreated = wrappedResponse.status == 201;\n      wrappedResponse.isBadRequest = wrappedResponse.status == 400;\n      wrappedResponse.isForbidden = wrappedResponse.status == 403;\n      wrappedResponse.isNotFound = wrappedResponse.status == 404;\n      wrappedResponse.isServerError = wrappedResponse.status == 500;\n      wrappedResponse.isSuccessful = inRange(wrappedResponse.status, 200, 299);\n      wrappedResponse.isClientError = inRange(wrappedResponse.status, 400, 499);\n      wrappedResponse.isServerError = inRange(wrappedResponse.status, 500, 599);\n      return wrappedResponse;\n    }\n  }]);\n  return Requestor;\n}();\n\nfunction axiosRestClient(config) {\n  if (!config.baseUrl) {\n    throw new Error('config.baseUrl is required');\n  }\n\n  var requestor = new Requestor(config);\n  var apiProxy = new Proxy(requestor, {\n    get: function get(requestor, prop) {\n      return prop in requestor ? requestor[prop] : requestor.endpoint(prop);\n    }\n  });\n  return apiProxy;\n}\n\nexport default axiosRestClient;","map":null,"metadata":{},"sourceType":"module"}