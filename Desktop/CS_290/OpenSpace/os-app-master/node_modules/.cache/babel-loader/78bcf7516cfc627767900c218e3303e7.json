{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { IntlService } from './IntlService'; // tslint:disable:max-line-length\n\n/**\n * A React component which provides an internationalization service. Expects a locale string as a property of the component.\n */\n\nvar IntlProvider =\n/** @class */\nfunction (_super) {\n  __extends(IntlProvider, _super);\n\n  function IntlProvider() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Returns an internationalization service. The method is suitable for overriding when you implement custom internationalization behavior.\n   */\n\n\n  IntlProvider.prototype.getIntlService = function () {\n    return new IntlService(this.props.locale);\n  };\n  /**\n   * @hidden\n   */\n\n\n  IntlProvider.prototype.getChildContext = function () {\n    return {\n      kendoIntlService: this.getIntlService()\n    };\n  };\n  /**\n   * @hidden\n   */\n\n\n  IntlProvider.prototype.render = function () {\n    return React.Children.only(this.props.children);\n  };\n  /**\n   * @hidden\n   */\n\n\n  IntlProvider.propTypes = {\n    locale: PropTypes.string\n  };\n  /**\n   * @hidden\n   */\n\n  IntlProvider.childContextTypes = {\n    kendoIntlService: PropTypes.object\n  };\n  return IntlProvider;\n}(React.Component);\n\nexport default IntlProvider; // tslint:enable:max-line-length","map":null,"metadata":{},"sourceType":"module"}