{"ast":null,"code":"\"use strict\";\n\nvar React = require('react');\n\nvar div = React.createElement.bind(null, 'div');\nvar button = React.createElement.bind(null, 'button');\nvar a = React.createElement.bind(null, 'a');\nvar select = React.createElement.bind(null, 'select');\nvar option = React.createElement.bind(null, 'option');\nvar label = React.createElement.bind(null, 'label');\nvar idInc = 0;\nvar keyHandlers = {\n  38: 'handleUpKey',\n  40: 'handleDownKey',\n  32: 'handleSpaceKey',\n  13: 'handleEnterKey',\n  27: 'handleEscKey',\n  74: 'handleDownKey',\n  75: 'handleUpKey'\n};\n\nfunction interceptEvent(event) {\n  if (event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n}\n\nmodule.exports = React.createClass({\n  displayName: 'exports',\n  getInitialState: function getInitialState() {\n    return {\n      id: 'react-select-box-' + ++idInc,\n      open: false,\n      focusedIndex: -1,\n      pendingValue: []\n    };\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      closeText: 'Close',\n      clearText: 'Remove selection'\n    };\n  },\n  changeOnClose: function changeOnClose() {\n    return this.isMultiple() && String(this.props.changeOnClose) === 'true';\n  },\n  updatePendingValue: function updatePendingValue(value, cb) {\n    if (this.changeOnClose()) {\n      this.setState({\n        pendingValue: value\n      }, cb);\n      return true;\n    }\n\n    return false;\n  },\n  componentWillMount: function componentWillMount() {\n    this.updatePendingValue(this.props.value);\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(next) {\n    this.updatePendingValue(next.value);\n  },\n  clickingOption: false,\n  blurTimeout: null,\n  handleFocus: function handleFocus() {\n    clearTimeout(this.blurTimeout);\n  },\n  handleBlur: function handleBlur() {\n    clearTimeout(this.blurTimeout);\n    this.blurTimeout = setTimeout(this.handleClose, 0);\n  },\n  handleMouseDown: function handleMouseDown() {\n    this.clickingOption = true;\n  },\n  handleChange: function handleChange(val, cb) {\n    return function (event) {\n      this.clickingOption = false;\n      interceptEvent(event);\n\n      if (this.isMultiple()) {\n        var selected = [];\n\n        if (val != null) {\n          selected = this.value().slice(0);\n          var index = selected.indexOf(val);\n\n          if (index !== -1) {\n            selected.splice(index, 1);\n          } else {\n            selected.push(val);\n          }\n        }\n\n        this.updatePendingValue(selected, cb) || this.props.onChange(selected);\n      } else {\n        this.updatePendingValue(val, cb) || this.props.onChange(val);\n        this.handleClose();\n        this.refs.button.getDOMNode().focus();\n      }\n    }.bind(this);\n  },\n  handleNativeChange: function handleNativeChange(event) {\n    var val = event.target.value;\n\n    if (this.isMultiple()) {\n      var children = [].slice.call(event.target.childNodes, 0);\n      val = children.reduce(function (memo, child) {\n        if (child.selected) {\n          memo.push(child.value);\n        }\n\n        return memo;\n      }, []);\n    }\n\n    this.props.onChange(val);\n  },\n  handleClear: function handleClear(event) {\n    interceptEvent(event);\n    this.handleChange(null, function () {\n      // only called when change=\"true\"\n      this.props.onChange(this.state.pendingValue);\n    })(event);\n  },\n  toggleOpenClose: function toggleOpenClose(event) {\n    interceptEvent(event);\n    this.setState({\n      open: !this.state.open\n    });\n\n    if (this.state.open) {\n      return this.setState({\n        open: false\n      });\n    }\n\n    this.handleOpen();\n  },\n  handleOpen: function handleOpen(event) {\n    interceptEvent(event);\n    this.setState({\n      open: true\n    }, function () {\n      this.refs.menu.getDOMNode().focus();\n    });\n  },\n  handleClose: function handleClose(event) {\n    interceptEvent(event);\n\n    if (!this.clickingOption) {\n      this.setState({\n        open: false,\n        focusedIndex: -1\n      });\n    }\n\n    if (this.changeOnClose()) {\n      this.props.onChange(this.state.pendingValue);\n    }\n  },\n  moveFocus: function moveFocus(move) {\n    var len = React.Children.count(this.props.children);\n    var idx = (this.state.focusedIndex + move + len) % len;\n    this.setState({\n      focusedIndex: idx\n    });\n  },\n  handleKeyDown: function handleKeyDown(event) {\n    if (keyHandlers[event.which]) {\n      this[keyHandlers[event.which]](event);\n    }\n  },\n  handleUpKey: function handleUpKey(event) {\n    interceptEvent(event);\n    this.moveFocus(-1);\n  },\n  handleDownKey: function handleDownKey(event) {\n    interceptEvent(event);\n\n    if (!this.state.open) {\n      this.handleOpen(event);\n    }\n\n    this.moveFocus(1);\n  },\n  handleSpaceKey: function handleSpaceKey(event) {\n    interceptEvent(event);\n\n    if (!this.state.open) {\n      this.handleOpen(event);\n    } else if (this.state.focusedIndex !== -1) {\n      this.handleEnterKey();\n    }\n  },\n  handleEnterKey: function handleEnterKey(event) {\n    if (this.state.focusedIndex !== -1) {\n      this.handleChange(this.options()[this.state.focusedIndex].value)(event);\n    }\n  },\n  handleEscKey: function handleEscKey(event) {\n    if (this.state.open) {\n      this.handleClose(event);\n    } else {\n      this.handleClear(event);\n    }\n  },\n  label: function label() {\n    var selected = this.options().filter(function (option) {\n      return this.isSelected(option.value);\n    }.bind(this)).map(function (option) {\n      return option.label;\n    });\n    return selected.length > 0 ? selected.join(', ') : this.props.label;\n  },\n  isMultiple: function isMultiple() {\n    return String(this.props.multiple) === 'true';\n  },\n  options: function options() {\n    var options = [];\n    React.Children.forEach(this.props.children, function (option) {\n      options.push({\n        value: option.props.value,\n        label: option.props.children\n      });\n    });\n    return options;\n  },\n  value: function value() {\n    var value = this.changeOnClose() ? this.state.pendingValue : this.props.value;\n\n    if (!this.isMultiple() || Array.isArray(value)) {\n      return value;\n    }\n\n    if (value != null) {\n      return [value];\n    }\n\n    return [];\n  },\n  hasValue: function hasValue() {\n    if (this.isMultiple()) {\n      return this.value().length > 0;\n    }\n\n    return this.value() != null;\n  },\n  isSelected: function isSelected(value) {\n    if (this.isMultiple()) {\n      return this.value().indexOf(value) !== -1;\n    }\n\n    return this.value() === value;\n  },\n  render: function render() {\n    var className = 'react-select-box-container';\n\n    if (this.props.className) {\n      className += ' ' + this.props.className;\n    }\n\n    if (this.isMultiple()) {\n      className += ' react-select-box-multi';\n    }\n\n    if (!this.hasValue()) {\n      className += ' react-select-box-empty';\n    }\n\n    return div({\n      onKeyDown: this.handleKeyDown,\n      className: className\n    }, button({\n      id: this.state.id,\n      ref: 'button',\n      className: 'react-select-box',\n      onClick: this.toggleOpenClose,\n      onBlur: this.handleBlur,\n      tabIndex: '0',\n      'aria-hidden': true\n    }, div({\n      className: 'react-select-box-label'\n    }, this.label())), this.renderOptionMenu(), this.renderClearButton(), this.renderNativeSelect());\n  },\n  renderNativeSelect: function renderNativeSelect() {\n    var id = this.state.id + '-native-select';\n    var multiple = this.isMultiple();\n    var empty = multiple ? null : option({\n      key: '',\n      value: ''\n    }, 'No Selection');\n    var options = [empty].concat(this.props.children);\n    return div({\n      className: 'react-select-box-native'\n    }, label({\n      htmlFor: id\n    }, this.props.label), select({\n      id: id,\n      multiple: multiple,\n      onKeyDown: function onKeyDown(e) {\n        e.stopPropagation();\n      },\n      value: this.props.value || (multiple ? [] : ''),\n      onChange: this.handleNativeChange\n    }, options));\n  },\n  renderOptionMenu: function renderOptionMenu() {\n    var className = 'react-select-box-options';\n\n    if (!this.state.open) {\n      className += ' react-select-box-hidden';\n    }\n    /*\n    var active = null\n    if (this.state.focusedIndex !== -1) {\n      active = this.state.id + '-' + this.state.focusedIndex\n    }\n    */\n\n\n    return div({\n      className: className,\n      onBlur: this.handleBlur,\n      onFocus: this.handleFocus,\n      'aria-hidden': true,\n      ref: 'menu',\n      tabIndex: 0\n    }, div({\n      className: 'react-select-box-off-screen'\n    }, this.options().map(this.renderOption)), this.renderCloseButton());\n  },\n  renderOption: function renderOption(option, i) {\n    var className = 'react-select-box-option';\n\n    if (i === this.state.focusedIndex) {\n      className += ' react-select-box-option-focused';\n    }\n\n    if (this.isSelected(option.value)) {\n      className += ' react-select-box-option-selected';\n    }\n\n    return a({\n      id: this.state.id + '-' + i,\n      href: '#',\n      onClick: this.handleChange(option.value),\n      onMouseDown: this.handleMouseDown,\n      className: className,\n      tabIndex: -1,\n      key: option.value,\n      onBlur: this.handleBlur,\n      onFocus: this.handleFocus\n    }, option.label);\n  },\n  renderClearButton: function renderClearButton() {\n    if (this.hasValue()) {\n      return button({\n        'aria-label': this.props.clearText,\n        className: 'react-select-box-clear',\n        onClick: this.handleClear\n      });\n    }\n  },\n  renderCloseButton: function renderCloseButton() {\n    if (this.isMultiple() && this.props.closeText) {\n      return button({\n        onClick: this.handleClose,\n        className: 'react-select-box-close',\n        onBlur: this.handleBlur,\n        onFocus: this.handleFocus\n      }, this.props.closeText);\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}