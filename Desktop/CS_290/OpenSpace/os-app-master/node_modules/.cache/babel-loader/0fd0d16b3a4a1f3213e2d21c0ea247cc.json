{"ast":null,"code":"import _slicedToArray from \"/Users/mollycarmody/Desktop/CS_290/OpenSpace/os-app-master/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mollycarmody/Desktop/CS_290/OpenSpace/os-app-master/src/Components/Filter.js\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { makeStyles, useTheme } from '@material-ui/styles';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Chip from '@material-ui/core/Chip';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    formControl: {\n      margin: theme.spacing.unit,\n      minWidth: 120,\n      maxWidth: 300\n    },\n    chips: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    chip: {\n      margin: theme.spacing.unit / 4\n    },\n    noLabel: {\n      marginTop: theme.spacing.unit * 3\n    }\n  };\n});\nvar ITEM_HEIGHT = 48;\nvar ITEM_PADDING_TOP = 8;\nvar MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250\n    }\n  }\n};\nvar names = ['Oliver Hansen', 'Van Henry', 'April Tucker', 'Ralph Hubbard', 'Omar Alexander', 'Carlos Abbott', 'Miriam Wagner', 'Bradley Wilkerson', 'Virginia Andrews', 'Kelly Snyder'];\n\nfunction getStyles(name, personName, theme) {\n  return {\n    fontWeight: personName.indexOf(name) === -1 ? theme.typography.fontWeightRegular : theme.typography.fontWeightMedium\n  };\n}\n\nfunction MultipleSelect() {\n  var classes = useStyles();\n  var theme = useTheme();\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      personName = _React$useState2[0],\n      setPersonName = _React$useState2[1];\n\n  function handleChange(event) {\n    setPersonName(event.target.value);\n  }\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    htmlFor: \"select-multiple\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Name\"), React.createElement(Select, {\n    multiple: true,\n    value: personName,\n    onChange: handleChange,\n    input: React.createElement(Input, {\n      id: \"select-multiple\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }),\n    MenuProps: MenuProps,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, names.map(function (name) {\n    return React.createElement(MenuItem, {\n      key: name,\n      value: name,\n      style: getStyles(name, personName, theme),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, name);\n  }))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    htmlFor: \"select-multiple-checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Tag\"), React.createElement(Select, {\n    multiple: true,\n    value: personName,\n    onChange: handleChange,\n    input: React.createElement(Input, {\n      id: \"select-multiple-checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }),\n    renderValue: function renderValue(selected) {\n      return selected.join(', ');\n    },\n    MenuProps: MenuProps,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, names.map(function (name) {\n    return React.createElement(MenuItem, {\n      key: name,\n      value: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      checked: personName.indexOf(name) > -1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(ListItemText, {\n      primary: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }));\n  }))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    htmlFor: \"select-multiple-chip\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Chip\"), React.createElement(Select, {\n    multiple: true,\n    value: personName,\n    onChange: handleChange,\n    input: React.createElement(Input, {\n      id: \"select-multiple-chip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }),\n    renderValue: function renderValue(selected) {\n      return React.createElement(\"div\", {\n        className: classes.chips,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, selected.map(function (value) {\n        return React.createElement(Chip, {\n          key: value,\n          label: value,\n          className: classes.chip,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        });\n      }));\n    },\n    MenuProps: MenuProps,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, names.map(function (name) {\n    return React.createElement(MenuItem, {\n      key: name,\n      value: name,\n      style: getStyles(name, personName, theme),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, name);\n  }))), React.createElement(FormControl, {\n    className: classNames(classes.formControl, classes.noLabel),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(Select, {\n    multiple: true,\n    displayEmpty: true,\n    value: personName,\n    onChange: handleChange,\n    input: React.createElement(Input, {\n      id: \"select-multiple-placeholder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }),\n    renderValue: function renderValue(selected) {\n      if (selected.length === 0) {\n        return React.createElement(\"em\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, \"Placeholder\");\n      }\n\n      return selected.join(', ');\n    },\n    MenuProps: MenuProps,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    disabled: true,\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(\"em\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"Placeholder\")), names.map(function (name) {\n    return React.createElement(MenuItem, {\n      key: name,\n      value: name,\n      style: getStyles(name, personName, theme),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, name);\n  }))));\n}\n\nexport default MultipleSelect; // import React from 'react';\n//\n// import { MDBRow, MDBContainer, MDBInput, MDBCol, MDBFormInline, MDBIcon, MDBBtn } from \"mdbreact\";\n// import { MDBDropdown, MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem } from \"mdbreact\";\n//\n//\n// import classNames from 'classnames';\n// import { makeStyles, useTheme } from '@material-ui/styles';\n// import Input from '@material-ui/core/Input';\n// import InputLabel from '@material-ui/core/InputLabel';\n// import MenuItem from '@material-ui/core/MenuItem';\n// import FormControl from '@material-ui/core/FormControl';\n// import ListItemText from '@material-ui/core/ListItemText';\n// import Select from '@material-ui/core/Select';\n// import Checkbox from '@material-ui/core/Checkbox';\n// import Chip from '@material-ui/core/Chip';\n//\n// import moment from 'moment';\n// import DayPickerInput from 'react-day-picker/DayPickerInput.js';\n// import { formatDate, parseDate } from 'react-day-picker/moment';\n// import 'react-day-picker/lib/style.css';\n//\n// const useStyles = makeStyles(theme => ({\n//   root: {\n//     display: 'flex',\n//     flexWrap: 'wrap',\n//   },\n//   formControl: {\n//     margin: theme.spacing.unit,\n//     minWidth: 120,\n//     maxWidth: 300,\n//   },\n//   chips: {\n//     display: 'flex',\n//     flexWrap: 'wrap',\n//   },\n//   chip: {\n//     margin: theme.spacing.unit / 4,\n//   },\n//   noLabel: {\n//     marginTop: theme.spacing.unit * 3,\n//   },\n// }));\n//\n// const ITEM_HEIGHT = 48;\n// const ITEM_PADDING_TOP = 8;\n// const MenuProps = {\n//   PaperProps: {\n//     style: {\n//       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n//       width: 250,\n//     },\n//   },\n// };\n//\n// const names = [\n//   'Oliver Hansen',\n//   'Van Henry',\n//   'April Tucker',\n//   'Ralph Hubbard',\n//   'Omar Alexander',\n//   'Carlos Abbott',\n//   'Miriam Wagner',\n//   'Bradley Wilkerson',\n//   'Virginia Andrews',\n//   'Kelly Snyder',\n// ];\n//\n// function getStyles(name, personName, theme) {\n//   return {\n//     fontWeight:\n//       personName.indexOf(name) === -1\n//         ? theme.typography.fontWeightRegular\n//         : theme.typography.fontWeightMedium,\n//   };\n// }\n//\n//\n// export class Filter extends React.Component{\n//   constructor(props){\n//     super(props);\n//     this.state={\n//       from: undefined,\n//       to: undefined,\n//       colors:[],\n//       name: [],\n//       spaceTypes:[\n//         {\n//           value:'Restaurant space',\n//           label:'Restaurant'\n//         },\n//         {\n//           value:'Mall space',\n//           label:'Mall'\n//         },\n//         {\n//           value:'Apartment space',\n//           label:'Apartment'\n//         },\n//         {\n//           value:'Garage space',\n//           label:'Garage'\n//         },\n//         {\n//           value:'Closet space',\n//           label:'Closet'\n//         },\n//         {\n//           value:'Basement space',\n//           label:'Basement'\n//         },\n//         {\n//           value:'Outdoor space',\n//           label:'Outdoor (i.e shed)'\n//         }\n//       ]\n//     }\n//   }\n//\n//   showFromMonth() {\n//     const { from, to } = this.state;\n//     if (!from) {\n//       return;\n//     }\n//     if (moment(to).diff(moment(from), 'months') < 2) {\n//       this.to.getDayPicker().showMonth(from);\n//     }\n//   }\n//   handleFromChange(from) {\n//     // Change the from date and focus the \"to\" input field\n//     this.setState({ from });\n//   }\n//   handleToChange(to) {\n//     this.setState({ to }, this.showFromMonth);\n//   }\n//\n//\n//\n//\n//   render(){\n//\n//     const { from, to } = this.state;\n//     const modifiers = { start: from, end: to };\n//     const spaceTypeDropItems = this.state.spaceTypes.map((space, index) =>\n//         <MDBDropdownItem value={space.value} >{space.label}</MDBDropdownItem>\n//\n//\n//     );\n//     const classes = useStyles();\n//   const theme = useTheme();\n//   const [personName, setPersonName] = React.useState([]);\n//   function handleChange(event) {\n//    setPersonName(event.target.value);\n//  }\n//     return(\n//       <div className=\"filter-main\">\n//         <div className=\"filter-spaceTypeDropdown\">\n//         <div className={classes.root}>\n//       <FormControl className={classes.formControl}>\n//         <InputLabel htmlFor=\"select-multiple\">Name</InputLabel>\n//         <Select\n//           multiple\n//           value={personName}\n//           onChange={handleChange}\n//           input={<Input id=\"select-multiple\" />}\n//           MenuProps={MenuProps}\n//         >\n//           {names.map(name => (\n//             <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n//               {name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       <FormControl className={classes.formControl}>\n//         <InputLabel htmlFor=\"select-multiple-checkbox\">Tag</InputLabel>\n//         <Select\n//           multiple\n//           value={personName}\n//           onChange={handleChange}\n//           input={<Input id=\"select-multiple-checkbox\" />}\n//           renderValue={selected => selected.join(', ')}\n//           MenuProps={MenuProps}\n//         >\n//           {names.map(name => (\n//             <MenuItem key={name} value={name}>\n//               <Checkbox checked={personName.indexOf(name) > -1} />\n//               <ListItemText primary={name} />\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       <FormControl className={classes.formControl}>\n//         <InputLabel htmlFor=\"select-multiple-chip\">Chip</InputLabel>\n//         <Select\n//           multiple\n//           value={personName}\n//           onChange={handleChange}\n//           input={<Input id=\"select-multiple-chip\" />}\n//           renderValue={selected => (\n//             <div className={classes.chips}>\n//               {selected.map(value => (\n//                 <Chip key={value} label={value} className={classes.chip} />\n//               ))}\n//             </div>\n//           )}\n//           MenuProps={MenuProps}\n//         >\n//           {names.map(name => (\n//             <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n//               {name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       <FormControl className={classNames(classes.formControl, classes.noLabel)}>\n//         <Select\n//           multiple\n//           displayEmpty\n//           value={personName}\n//           onChange={handleChange}\n//           input={<Input id=\"select-multiple-placeholder\" />}\n//           renderValue={selected => {\n//             if (selected.length === 0) {\n//               return <em>Placeholder</em>;\n//             }\n//\n//             return selected.join(', ');\n//           }}\n//           MenuProps={MenuProps}\n//         >\n//           <MenuItem disabled value=\"\">\n//             <em>Placeholder</em>\n//           </MenuItem>\n//           {names.map(name => (\n//             <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n//               {name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//     </div>\n//         </div>\n//         <div className=\"InputFromTo\">\n//            <DayPickerInput\n//              value={from}\n//              placeholder=\"From\"\n//              format=\"LL\"\n//              formatDate={formatDate}\n//              parseDate={parseDate}\n//              dayPickerProps={{\n//                selectedDays: [from, { from, to }],\n//                disabledDays: { after: to },\n//                toMonth: to,\n//                modifiers,\n//                numberOfMonths: 1,\n//                onDayClick: () => this.to.getInput().focus(),\n//              }}\n//              onDayChange={this.handleFromChange}\n//            />{' '}\n//            —{' '}\n//            <span className=\"InputFromTo-to\">\n//              <DayPickerInput\n//                ref={el => (this.to = el)}\n//                value={to}\n//                placeholder=\"To\"\n//                format=\"LL\"\n//                formatDate={formatDate}\n//                parseDate={parseDate}\n//                dayPickerProps={{\n//                  selectedDays: [from, { from, to }],\n//                  disabledDays: { before: from },\n//                  modifiers,\n//                  month: from,\n//                  fromMonth: from,\n//                  numberOfMonths: 1,\n//                }}\n//                onDayChange={this.handleToChange}\n//              />\n//            </span>\n//         </div>\n//\n//       </div>\n//\n//     );\n//   }\n//\n// }\n//\n// export default Filter;","map":{"version":3,"sources":["/Users/mollycarmody/Desktop/CS_290/OpenSpace/os-app-master/src/Components/Filter.js"],"names":["React","classNames","makeStyles","useTheme","Input","InputLabel","MenuItem","FormControl","ListItemText","Select","Checkbox","Chip","useStyles","theme","root","display","flexWrap","formControl","margin","spacing","unit","minWidth","maxWidth","chips","chip","noLabel","marginTop","ITEM_HEIGHT","ITEM_PADDING_TOP","MenuProps","PaperProps","style","maxHeight","width","names","getStyles","name","personName","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","MultipleSelect","classes","useState","setPersonName","handleChange","event","target","value","map","selected","join","length"],"mappings":"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AOF,QAAQ,CAACC,IAAT,CAAc,IAAd,CAAP;AACD,KAZH;AAaE,IAAA,SAAS,EAAExB,SAbb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAeE,oBAAC,QAAD;AAAU,IAAA,QAAQ,MAAlB;AAAmB,IAAA,KAAK,EAAC,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CAfF,EAkBGK,KAAK,CAACiB,GAAN,CAAU,UAAAf,IAAI;AAAA,WACb,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,IAAf;AAAqB,MAAA,KAAK,EAAEA,IAA5B;AAAkC,MAAA,KAAK,EAAED,SAAS,CAACC,IAAD,EAAOC,UAAP,EAAmBxB,KAAnB,CAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGuB,IADH,CADa;AAAA,GAAd,CAlBH,CADF,CA1DF,CADF;AAuFD;;AAED,eAAeO,cAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\nimport React from 'react';\nimport classNames from 'classnames';\nimport { makeStyles, useTheme } from '@material-ui/styles';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Chip from '@material-ui/core/Chip';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  formControl: {\n    margin: theme.spacing.unit,\n    minWidth: 120,\n    maxWidth: 300,\n  },\n  chips: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  chip: {\n    margin: theme.spacing.unit / 4,\n  },\n  noLabel: {\n    marginTop: theme.spacing.unit * 3,\n  },\n}));\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nconst names = [\n  'Oliver Hansen',\n  'Van Henry',\n  'April Tucker',\n  'Ralph Hubbard',\n  'Omar Alexander',\n  'Carlos Abbott',\n  'Miriam Wagner',\n  'Bradley Wilkerson',\n  'Virginia Andrews',\n  'Kelly Snyder',\n];\n\nfunction getStyles(name, personName, theme) {\n  return {\n    fontWeight:\n      personName.indexOf(name) === -1\n        ? theme.typography.fontWeightRegular\n        : theme.typography.fontWeightMedium,\n  };\n}\n\nfunction MultipleSelect() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [personName, setPersonName] = React.useState([]);\n\n  function handleChange(event) {\n    setPersonName(event.target.value);\n  }\n\n  return (\n    <div className={classes.root}>\n      <FormControl className={classes.formControl}>\n        <InputLabel htmlFor=\"select-multiple\">Name</InputLabel>\n        <Select\n          multiple\n          value={personName}\n          onChange={handleChange}\n          input={<Input id=\"select-multiple\" />}\n          MenuProps={MenuProps}\n        >\n          {names.map(name => (\n            <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <FormControl className={classes.formControl}>\n        <InputLabel htmlFor=\"select-multiple-checkbox\">Tag</InputLabel>\n        <Select\n          multiple\n          value={personName}\n          onChange={handleChange}\n          input={<Input id=\"select-multiple-checkbox\" />}\n          renderValue={selected => selected.join(', ')}\n          MenuProps={MenuProps}\n        >\n          {names.map(name => (\n            <MenuItem key={name} value={name}>\n              <Checkbox checked={personName.indexOf(name) > -1} />\n              <ListItemText primary={name} />\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <FormControl className={classes.formControl}>\n        <InputLabel htmlFor=\"select-multiple-chip\">Chip</InputLabel>\n        <Select\n          multiple\n          value={personName}\n          onChange={handleChange}\n          input={<Input id=\"select-multiple-chip\" />}\n          renderValue={selected => (\n            <div className={classes.chips}>\n              {selected.map(value => (\n                <Chip key={value} label={value} className={classes.chip} />\n              ))}\n            </div>\n          )}\n          MenuProps={MenuProps}\n        >\n          {names.map(name => (\n            <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <FormControl className={classNames(classes.formControl, classes.noLabel)}>\n        <Select\n          multiple\n          displayEmpty\n          value={personName}\n          onChange={handleChange}\n          input={<Input id=\"select-multiple-placeholder\" />}\n          renderValue={selected => {\n            if (selected.length === 0) {\n              return <em>Placeholder</em>;\n            }\n\n            return selected.join(', ');\n          }}\n          MenuProps={MenuProps}\n        >\n          <MenuItem disabled value=\"\">\n            <em>Placeholder</em>\n          </MenuItem>\n          {names.map(name => (\n            <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n\nexport default MultipleSelect;\n\n\n// import React from 'react';\n//\n// import { MDBRow, MDBContainer, MDBInput, MDBCol, MDBFormInline, MDBIcon, MDBBtn } from \"mdbreact\";\n// import { MDBDropdown, MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem } from \"mdbreact\";\n//\n//\n// import classNames from 'classnames';\n// import { makeStyles, useTheme } from '@material-ui/styles';\n// import Input from '@material-ui/core/Input';\n// import InputLabel from '@material-ui/core/InputLabel';\n// import MenuItem from '@material-ui/core/MenuItem';\n// import FormControl from '@material-ui/core/FormControl';\n// import ListItemText from '@material-ui/core/ListItemText';\n// import Select from '@material-ui/core/Select';\n// import Checkbox from '@material-ui/core/Checkbox';\n// import Chip from '@material-ui/core/Chip';\n//\n// import moment from 'moment';\n// import DayPickerInput from 'react-day-picker/DayPickerInput.js';\n// import { formatDate, parseDate } from 'react-day-picker/moment';\n// import 'react-day-picker/lib/style.css';\n//\n// const useStyles = makeStyles(theme => ({\n//   root: {\n//     display: 'flex',\n//     flexWrap: 'wrap',\n//   },\n//   formControl: {\n//     margin: theme.spacing.unit,\n//     minWidth: 120,\n//     maxWidth: 300,\n//   },\n//   chips: {\n//     display: 'flex',\n//     flexWrap: 'wrap',\n//   },\n//   chip: {\n//     margin: theme.spacing.unit / 4,\n//   },\n//   noLabel: {\n//     marginTop: theme.spacing.unit * 3,\n//   },\n// }));\n//\n// const ITEM_HEIGHT = 48;\n// const ITEM_PADDING_TOP = 8;\n// const MenuProps = {\n//   PaperProps: {\n//     style: {\n//       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n//       width: 250,\n//     },\n//   },\n// };\n//\n// const names = [\n//   'Oliver Hansen',\n//   'Van Henry',\n//   'April Tucker',\n//   'Ralph Hubbard',\n//   'Omar Alexander',\n//   'Carlos Abbott',\n//   'Miriam Wagner',\n//   'Bradley Wilkerson',\n//   'Virginia Andrews',\n//   'Kelly Snyder',\n// ];\n//\n// function getStyles(name, personName, theme) {\n//   return {\n//     fontWeight:\n//       personName.indexOf(name) === -1\n//         ? theme.typography.fontWeightRegular\n//         : theme.typography.fontWeightMedium,\n//   };\n// }\n//\n//\n// export class Filter extends React.Component{\n//   constructor(props){\n//     super(props);\n//     this.state={\n//       from: undefined,\n//       to: undefined,\n//       colors:[],\n//       name: [],\n//       spaceTypes:[\n//         {\n//           value:'Restaurant space',\n//           label:'Restaurant'\n//         },\n//         {\n//           value:'Mall space',\n//           label:'Mall'\n//         },\n//         {\n//           value:'Apartment space',\n//           label:'Apartment'\n//         },\n//         {\n//           value:'Garage space',\n//           label:'Garage'\n//         },\n//         {\n//           value:'Closet space',\n//           label:'Closet'\n//         },\n//         {\n//           value:'Basement space',\n//           label:'Basement'\n//         },\n//         {\n//           value:'Outdoor space',\n//           label:'Outdoor (i.e shed)'\n//         }\n//       ]\n//     }\n//   }\n//\n//   showFromMonth() {\n//     const { from, to } = this.state;\n//     if (!from) {\n//       return;\n//     }\n//     if (moment(to).diff(moment(from), 'months') < 2) {\n//       this.to.getDayPicker().showMonth(from);\n//     }\n//   }\n//   handleFromChange(from) {\n//     // Change the from date and focus the \"to\" input field\n//     this.setState({ from });\n//   }\n//   handleToChange(to) {\n//     this.setState({ to }, this.showFromMonth);\n//   }\n//\n//\n//\n//\n//   render(){\n//\n//     const { from, to } = this.state;\n//     const modifiers = { start: from, end: to };\n//     const spaceTypeDropItems = this.state.spaceTypes.map((space, index) =>\n//         <MDBDropdownItem value={space.value} >{space.label}</MDBDropdownItem>\n//\n//\n//     );\n//     const classes = useStyles();\n//   const theme = useTheme();\n//   const [personName, setPersonName] = React.useState([]);\n//   function handleChange(event) {\n//    setPersonName(event.target.value);\n//  }\n//     return(\n//       <div className=\"filter-main\">\n//         <div className=\"filter-spaceTypeDropdown\">\n//         <div className={classes.root}>\n//       <FormControl className={classes.formControl}>\n//         <InputLabel htmlFor=\"select-multiple\">Name</InputLabel>\n//         <Select\n//           multiple\n//           value={personName}\n//           onChange={handleChange}\n//           input={<Input id=\"select-multiple\" />}\n//           MenuProps={MenuProps}\n//         >\n//           {names.map(name => (\n//             <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n//               {name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       <FormControl className={classes.formControl}>\n//         <InputLabel htmlFor=\"select-multiple-checkbox\">Tag</InputLabel>\n//         <Select\n//           multiple\n//           value={personName}\n//           onChange={handleChange}\n//           input={<Input id=\"select-multiple-checkbox\" />}\n//           renderValue={selected => selected.join(', ')}\n//           MenuProps={MenuProps}\n//         >\n//           {names.map(name => (\n//             <MenuItem key={name} value={name}>\n//               <Checkbox checked={personName.indexOf(name) > -1} />\n//               <ListItemText primary={name} />\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       <FormControl className={classes.formControl}>\n//         <InputLabel htmlFor=\"select-multiple-chip\">Chip</InputLabel>\n//         <Select\n//           multiple\n//           value={personName}\n//           onChange={handleChange}\n//           input={<Input id=\"select-multiple-chip\" />}\n//           renderValue={selected => (\n//             <div className={classes.chips}>\n//               {selected.map(value => (\n//                 <Chip key={value} label={value} className={classes.chip} />\n//               ))}\n//             </div>\n//           )}\n//           MenuProps={MenuProps}\n//         >\n//           {names.map(name => (\n//             <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n//               {name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       <FormControl className={classNames(classes.formControl, classes.noLabel)}>\n//         <Select\n//           multiple\n//           displayEmpty\n//           value={personName}\n//           onChange={handleChange}\n//           input={<Input id=\"select-multiple-placeholder\" />}\n//           renderValue={selected => {\n//             if (selected.length === 0) {\n//               return <em>Placeholder</em>;\n//             }\n//\n//             return selected.join(', ');\n//           }}\n//           MenuProps={MenuProps}\n//         >\n//           <MenuItem disabled value=\"\">\n//             <em>Placeholder</em>\n//           </MenuItem>\n//           {names.map(name => (\n//             <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n//               {name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//     </div>\n//         </div>\n//         <div className=\"InputFromTo\">\n//            <DayPickerInput\n//              value={from}\n//              placeholder=\"From\"\n//              format=\"LL\"\n//              formatDate={formatDate}\n//              parseDate={parseDate}\n//              dayPickerProps={{\n//                selectedDays: [from, { from, to }],\n//                disabledDays: { after: to },\n//                toMonth: to,\n//                modifiers,\n//                numberOfMonths: 1,\n//                onDayClick: () => this.to.getInput().focus(),\n//              }}\n//              onDayChange={this.handleFromChange}\n//            />{' '}\n//            —{' '}\n//            <span className=\"InputFromTo-to\">\n//              <DayPickerInput\n//                ref={el => (this.to = el)}\n//                value={to}\n//                placeholder=\"To\"\n//                format=\"LL\"\n//                formatDate={formatDate}\n//                parseDate={parseDate}\n//                dayPickerProps={{\n//                  selectedDays: [from, { from, to }],\n//                  disabledDays: { before: from },\n//                  modifiers,\n//                  month: from,\n//                  fromMonth: from,\n//                  numberOfMonths: 1,\n//                }}\n//                onDayChange={this.handleToChange}\n//              />\n//            </span>\n//         </div>\n//\n//       </div>\n//\n//     );\n//   }\n//\n// }\n//\n// export default Filter;\n"]},"metadata":{},"sourceType":"module"}